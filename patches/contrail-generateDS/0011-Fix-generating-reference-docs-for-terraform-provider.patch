From 64c7c3fa88a575c8968d7d2af94595f8ac6f4e48 Mon Sep 17 00:00:00 2001
From: Kamil Renczewski <kamil.renczewski@codilime.com>
Date: Tue, 14 Nov 2017 13:03:07 +0100
Subject: [PATCH 11/17] Fix generating reference docs for terraform provider

---
 terraform_mappings.py | 83 ++++++++++++++++++++++++++-------------------------
 1 file changed, 42 insertions(+), 41 deletions(-)

diff --git a/terraform_mappings.py b/terraform_mappings.py
index 0e012e2..3043638 100644
--- a/terraform_mappings.py
+++ b/terraform_mappings.py
@@ -112,6 +112,7 @@ class TerraformMappingsGenerator(object):
         self._type_map = type_map
         self._metadata_map = metadata
         self._top_level_map = {}
+        self._ctype_docs = set()
         self._type_count = {}
         self._identifier_map = identifiers
 
@@ -158,6 +159,7 @@ Reference for terraform_%s_provider resources schema:
 
 """ % self.NAME
         file.write(decl)
+        # Object
         for ident in sorted(self._identifier_map.values(),
                             key=lambda x: x.getCIdentifierName()):
             decl = 'resource "%(provider)s_%(name)s" <name> {' % {
@@ -166,14 +168,15 @@ Reference for terraform_%s_provider resources schema:
             file.write(decl)
             self._GenerateResourceDocfile(ident, file)
             file.write('}\n')
+
+        # CType
         for ctype in sorted(self._top_level_map.values(),
                             key=lambda x: x.getCIdentifierName()):
-            decl = '%(provider)s_%(name)s {' % {
-                "name": ctype.getName(),
-                "provider": self.NAME}
-            file.write(decl)
-            self._GenerateCTypeResourceDocfile(ctype, file)
-            file.write('\n}\n')
+            for deptype in ctype.getDependentTypes():
+                if deptype.getName() in self._ctype_docs:
+                    continue
+                self._GenerateCTypeDocs(deptype, file)
+            self._GenerateCTypeDocs(ctype, file)
 
 # ------------------- Object docs -------------------------------
     def _GenerateResourceDocfile(self, ident, file):
@@ -185,10 +188,12 @@ Reference for terraform_%s_provider resources schema:
         for prop in ident.getProperties():
             prop_type = TerraformTypeName(prop.getGoLangTypename())
             if prop_type == "schema.TypeList":
-                prop_type = 'contrail_' + prop.getCIdentifierName()
-            elem = '\t%(name)s = <%(type)s>\n' % {
+                prop_type = 'contrail_' + prop.getGoLangTypename()
+            descr = prop._xelement.description
+            elem = '\t%(name)s = <%(type)s>%(desc)s\n' % {
                 "name": prop.getCIdentifierName(),
-                "type": prop_type}
+                "type": prop_type,
+                "desc": ' // ' + descr if descr is not None else ""}
             file.write(elem)
 
 # ------------------- CType docs -------------------------------
@@ -200,11 +205,23 @@ Reference for terraform_%s_provider resources schema:
                 mtype = 'contrail_' + mtype
             if member.isSequence:
                 mtype = ' [ %s ] ' % mtype
-            elem = '\n\t"%(name)s" = <%(type)s>' % {
+            descr = member.xsd_object.description
+            elem = '\n\t"%(name)s" = <%(type)s>%(desc)s' % {
                 'name': member.membername.lower(),
-                'type': mtype}
+                'type': mtype,
+                "desc": ' // ' + descr if descr is not None else ""}
             file.write(elem)
 
+# ------------------- CType snippet docs -------------------------------
+    def _GenerateCTypeDocs(self, ctype, file):
+        self._ctype_docs.add(ctype.getName())
+        decl = '%(provider)s_%(name)s {' % {
+            "name": ctype.getName(),
+            "provider": self.NAME}
+        file.write(decl)
+        self._GenerateCTypeResourceDocfile(ctype, file)
+        file.write('\n}\n')
+
 # ------------------- Object -------------------------------
     def _GenerateObject(self, ident, filename):
         """ Generate the class corresponding to an IF-MAP Identifier
@@ -243,7 +260,7 @@ import (
         self._GenerateTerraformResourceDelete(ident, file)
         self._GenerateTerraformResource(ident, file)
 
-# ------------------- Struct Type -------------------------------
+# ------------------- Struct Type Header -------------------------------
     def _GenerateStructType(self, ctype, filename):
         file = self._parser.makeFile(filename)
         header = """//
@@ -264,6 +281,7 @@ import (
         file.write(header)
         self._GenerateCType(ctype, file)
 
+# ------------------- Struct Type -------------------------------
     def _GenerateCType(self, ctype, file):
         for deptype in ctype.getDependentTypes():
             if deptype.getName() in self._top_level_map:
@@ -271,10 +289,7 @@ import (
             self._GenerateCType(deptype, file)
         self._GenerateCTypeTerraformResourceSetFrom(ctype, file)
         self._GenerateCTypeTerraformResourceWriteTo(ctype, file)
-        #self._GenerateCTypeTerraformResourceCreate(ctype, file)
         self._GenerateCTypeTerraformResourceRead(ctype, file)
-        #self._GenerateCTypeTerraformResourceUpdate(ctype, file)
-        #self._GenerateCTypeTerraformResourceDelete(ctype, file)
         self._GenerateCTypeTerraformResource(ctype, file)
 
 # ------------------- Schema CType -------------------------------
@@ -303,10 +318,10 @@ func %(camel)s() map[string]*schema.Schema {
 \t\t\t // Cmplx: %(cpx)s; Seq: %(seq)s; Type: %(xsdtype)s
 \t\t\t%(req)s,
 \t\t\tType: %(type)s,%(elem)s
-\t\t},\n""" % {'name': member.membername.lower(), 'type':mtype, 'elem':elem,
+\t\t},\n""" % {'name': member.membername.lower(), 'type': mtype, 'elem': elem,
                'cpx': member.isComplex, 'seq': member.isSequence, 'xsdtype':
                member.xsd_object.getType(),
-               "req": required }
+               "req": required}
             file.write(decl)
         file.write('\t}\n}\n')
 
@@ -363,32 +378,18 @@ func Set%(camel)sFromResource(object *%(name)s, d *schema.ResourceData, m interf
             is_pod = IsPodType(gotype)
             field = CamelCase(member.membername)
             setter = "d.Set(\"%(name)s\", object.%(field)s)\n" % {
-                "name": member.membername, "field": field }
+                "name": member.membername, "field": field}
             ptr = "" if member.isSequence else "*"
-            ttype = TerraformTypeName(origtype, orig_name = True)
-            #obj = ""
-            #val = "val"
-            #if not is_pod:
-                #obj = "\tmember := new(%s)\n" % origtype
-                #setme = "\tSet%(type)sFromResource(member, d, m, key+\"%(name)s\")" % { "type": origtype, "name": member.membername }
+            ttype = TerraformTypeName(origtype, orig_name=True)
             if member.isSequence:
-                #if not is_pod:
-                    #gotype = "*"+origtype
-                #obj = "arr := make([]%(gotype)s, len(object.%(field)s.([]interface{})))" % gotype
                 setter = """\t%(name)s_arr := make([]%(gotype)s, len(object.%(field)s))
 \tfor _, v := range object.%(field)s {
 \t\t%(name)s_arr = append(%(name)s_arr, v)
 \t}
-\td.Set(\"%(name)s\", %(name)s_arr)\n""" % { "gotype": gotype, "field": field, "ttype": ttype,
-            "name": member.membername }
-            #if not is_pod and not member.isSequence:
-                #val = "_"
-            #decl = """\tif %(val)s, ok := d.GetOk(key+"%(name)s"); ok {
-#%(member_obj)s%(setme)s
-#}\n""" % {"name": member.membername, "member_obj": obj, "setme": setme,
-          #"val": val}
-
-            # ORIG - wrong table/list handling
+\td.Set(\"%(name)s\", %(name)s_arr)\n""" % {
+                    "gotype": gotype,
+                    "field": field, "ttype": ttype,
+                    "name": member.membername}
             if not is_pod:
                 setter = "Write%(type)sToResource(%(ptr)sobject.%(member)s, d, m, key + \"%(name)s\")\n" % {
                     "name": member.membername,
@@ -519,9 +520,9 @@ func %(schema)s() map[string]*schema.Schema {
         file.write(decl)
 
         if self.once:
-            #print udump(ident, max_depth=1)
-            #print "\n#\n#\n#\n"
-            #print udump(ident.getProperties(), max_depth=2)
+            # print udump(ident, max_depth=1)
+            # print "\n#\n#\n#\n"
+            # print udump(ident.getProperties(), max_depth=2)
             self.once = False
         for prop in ident.getProperties():
             prop_type = TerraformTypeName(prop.getGoLangTypename())
@@ -535,7 +536,7 @@ func %(schema)s() map[string]*schema.Schema {
 \t\t\t%(req)s,
 \t\t\tType: %(type)s,
 %(elem)s\t\t},\n""" % {"name": prop.getCIdentifierName().lower(),
-                       "type": prop_type, "elem": elem,
+                       "type": prop_type, "elem": elem,
                        "req": required }
             file.write(decl)
             ctype = prop.getCType()
-- 
2.7.4

