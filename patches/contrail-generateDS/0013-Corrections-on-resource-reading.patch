From 789fb866531a281aa7906b23e63d26b556679485 Mon Sep 17 00:00:00 2001
From: Kamil Renczewski <kamil.renczewski@codilime.com>
Date: Thu, 30 Nov 2017 16:29:22 +0100
Subject: [PATCH 13/17] Corrections on resource reading

---
 terraform_mappings.py | 404 ++++++++++++++++++++++++++++++++++++++++----------
 1 file changed, 324 insertions(+), 80 deletions(-)

diff --git a/terraform_mappings.py b/terraform_mappings.py
index 800692e..efe938c 100644
--- a/terraform_mappings.py
+++ b/terraform_mappings.py
@@ -107,7 +107,6 @@ class TerraformMappingsGenerator(object):
         return type(self)._NAME
 
     def __init__(self, parser, type_map, identifiers, metadata):
-        self.once = True
         self._parser = parser
         self._type_map = type_map
         self._metadata_map = metadata
@@ -118,7 +117,16 @@ class TerraformMappingsGenerator(object):
 
     def _SnippetGetClient(self):
         return "client := m.(*contrail.Client)\n"\
-                "client.GetServer() // dummy call"
+            "client.GetServer() // dummy call"
+
+    def _SnippetProviderResource(self, ident, suffix=""):
+        resname = (ident.getCIdentifierName() + (('_' + suffix) if len(suffix)
+                   else '')).lower()
+        decl = '\t"%(provider)s_%(name)s": %(res)s(),\n' % {
+            "name": resname,
+            "res": ResName(ident.getCppName() + suffix),
+            "provider": self.NAME}
+        return decl
 
 # ------------------- Generate resources map -------------------------------
     def _GenerateTypeMap(self, dirname):
@@ -139,17 +147,10 @@ var ContrailResourcesMap = map[string]*schema.Resource{
         file.write(decl)
         for ident in sorted(self._identifier_map.values(),
                             key=lambda x: x.getCIdentifierName()):
-            decl = '\t"%(provider)s_%(name)s": %(res)s(),\n' % {
-                "name": ident.getCIdentifierName().lower(),
-                "res": ResName(ident.getCppName()),
-                "provider": self.NAME}
-            file.write(decl)
-
-        decl = """
-}
-
-"""
-        file.write(decl)
+            file.write(self._SnippetProviderResource(ident))
+            if self._RefsNeeded(ident):
+                file.write(self._SnippetProviderResource(ident, "Refs"))
+        file.write("\n}\n")
 
 # ------------------- Generate resources docs -------------------------------
     def _GenerateDocfile(self, dirname):
@@ -226,6 +227,13 @@ Reference for terraform_%s_provider resources schema:
         self._GenerateCTypeResourceDocfile(ctype, file)
         file.write('\n}\n')
 
+    def _RefsNeeded(self, ident):
+        for link_info in ident.getLinksInfo():
+            if not ident.isLinkRef(link_info):
+                continue
+            return True
+        return False
+
 # ------------------- Object -------------------------------
     def _GenerateObject(self, ident, filename):
         """ Generate the class corresponding to an IF-MAP Identifier
@@ -257,14 +265,15 @@ import (
 
 """
         file.write(header)
+        need_refs = self._RefsNeeded(ident)
         self._GenerateTerraformResourceSetFrom(ident, file)
         self._GenerateTerraformResourceWriteTo(ident, file)
         self._GenerateTerraformResourceUpdateFrom(ident, file)
-        self._GenerateTerraformResourceCreate(ident, file)
-        self._GenerateTerraformResourceRead(ident, file)
-        self._GenerateTerraformResourceUpdate(ident, file)
-        self._GenerateTerraformResourceDelete(ident, file)
-        self._GenerateTerraformResource(ident, file)
+        self._GenerateTerraformResourceCreate(ident, need_refs, file)
+        self._GenerateTerraformResourceRead(ident, need_refs, file)
+        self._GenerateTerraformResourceUpdate(ident, need_refs, file)
+        self._GenerateTerraformResourceDelete(ident, need_refs, file)
+        self._GenerateTerraformResource(ident, need_refs, file)
 
 # ------------------- Struct Type Header -------------------------------
     def _GenerateStructType(self, ctype, filename):
@@ -279,8 +288,9 @@ package resources
 import (
         "github.com/hashicorp/terraform/helper/schema"
         "github.com/Juniper/contrail-go-api"
+        "github.com/davecgh/go-spew/spew"
 
-        //"fmt"
+        "log"
         "strings"
 )
 """
@@ -294,6 +304,7 @@ import (
                 continue
             self._GenerateCType(deptype, file)
         self._GenerateCTypeTerraformResourceSetFrom(ctype, file)
+        self._GenerateCTypeTerraformMapSetFrom(ctype, file)
         self._GenerateCTypeTerraformResourceWriteTo(ctype, file)
         self._GenerateCTypeTerraformResourceRead(ctype, file)
         self._GenerateCTypeTerraformResource(ctype, file)
@@ -334,8 +345,8 @@ func %(camel)s() map[string]*schema.Schema {
             file.write(decl)
         file.write('\t}\n}\n')
 
-# ------------------- Properties Setter CType -------------------------------
-    def _GenerateCTypeSetPropertyMethods(self, ctype):
+# ------------------- Properties Resource Setter CType -------------------------------
+    def _GenerateCTypeResourceSetPropertyMethods(self, ctype):
         setters = ""
         for member in ctype.getDataMembers():
             origtype = member.xsd_object.getType()
@@ -347,7 +358,9 @@ func %(camel)s() map[string]*schema.Schema {
             val = "val"
             if not is_pod:
                 obj = "\tmember := new(%s)\n" % origtype
-                setme = "\tSet%(type)sFromResource(member, d, m, key+\"%(name)s\")" % { "type": origtype, "name": member.membername }
+                # setme = "\tSet%(type)sFromResource(member, d, m, key+\"%(name)s\")" % { "type": origtype, "name": member.membername }
+                setme = "\tSet%(type)sFromMap(member, d, m, val)" % {
+                    "type": origtype, "name": member.membername}
             if member.isSequence:
                 obj = ""
                 if not is_pod:
@@ -356,14 +369,65 @@ func %(camel)s() map[string]*schema.Schema {
 \t\tobject.Add%(member)s(v.(%(gotype)s))
 \t}""" % { "gotype": gotype, "member": CamelCase(member.membername) }
             if not is_pod and not member.isSequence:
-                val = "_"
-            decl = """\tif %(val)s, ok := d.GetOk(key+"%(name)s"); ok {
+                # val = "_"
+                pass
+            decl = """
+\tif d != nil {
+\t\tfullKey := key+"%(name)s"
+\t\tval, ok := d.GetOk(fullKey)
+\t\tlog.Printf("GetOk -- (nested) KEY+NAME(%%v): %%v -- val: %%#v", fullKey, ok, val)
+\t\tpkey := key[:len(key)-1]
+\t\tvaln, okn := d.GetOk(pkey)
+\t\tlog.Printf("GET PREFIX  -- '%%v': %%v -- val: %%#v", pkey, okn, valn)
+\t}
+
+\tif %(val)s, ok := d.GetOk(key+"%(name)s"); ok {
 %(member_obj)s%(setme)s
 }\n""" % {"name": member.membername, "member_obj": obj, "setme": setme,
           "val": val}
             setters += decl
         return setters
 
+# ------------------- Properties Map Setter CType -------------------------------
+    def _GenerateCTypeMapSetPropertyMethods(self, ctype):
+        setters = ""
+        for member in ctype.getDataMembers():
+            origtype = member.xsd_object.getType()
+            gotype = getGoLangType(origtype)
+            is_pod = IsPodType(gotype)
+            setme = """//\tobject.%(camel)s = (val.(map[string]interface{})["%(name)s"]).(%(type)s)"""\
+                % {"camel": CamelCase(member.membername),
+                   "name": member.membername,
+                   "type": gotype}
+            obj = ""
+            val = "val"
+            if not is_pod:
+                obj = "\tm%s := new(%s)\n" % (
+                    CamelCase(member.membername), origtype)
+                setme = """\tSet%(type)sFromMap(m%(camel)s, d, m, (val.(map[string]interface{}))["%(name)s"])
+\tobject.%(camel)s = m%(camel)s"""\
+                    % {"type": origtype, "name": member.membername,
+                       "camel": CamelCase(member.membername)}
+            if member.isSequence:
+                obj = ""
+                if not is_pod:
+                    gotype = "*"+origtype
+                setme = """\tfor _, v := range val.([]interface{}) {
+\t\tobject.Add%(member)s(v.(%(gotype)s))
+\t}""" % { "gotype": gotype, "member": CamelCase(member.membername) }
+            if not is_pod and not member.isSequence:
+                val = "_"
+            decl = """
+\tlog.Print("Setting %(name)s ...")
+\tm%(camel)sobj := (val.(map[string]interface{}))["%(name)s"]
+\tlog.Printf("Mem %(camel)s => %%+v", m%(camel)sobj)
+%(member_obj)s%(setme)s
+\tlog.Print("OK")\n""" % {"name": member.membername, "member_obj": obj, "setme": setme,
+                          "val": val, "mtype": "NOT-NEEDED", "camel":
+                          CamelCase(member.membername)}
+            setters += decl
+        return setters
+
 # ------------------- Set From Resource CType -------------------------------
     def _GenerateCTypeTerraformResourceSetFrom(self, ctype, file):
         decl = """
@@ -372,9 +436,33 @@ func Set%(camel)sFromResource(object *%(name)s, d *schema.ResourceData, m interf
 \tif len(key) != 0 {
 \t\tkey = key + "."
 \t}
+\tlog.Printf("[Set%(camel)sFromResource] key = %%v, prefix = %%v", key, prefix)
+
+\t// SPEW
+\t//log.Print(spew.Sdump(d))
+\tspew.Dump(d) // dummy call to satisfy import
+\t// SPEW
+
 %(setters)s}
 """ %{"camel": ctype.getName(), "setters":
-      '\t'.join(self._GenerateCTypeSetPropertyMethods(ctype).splitlines(True)),
+      '\t'.join(self._GenerateCTypeResourceSetPropertyMethods(ctype).splitlines(True)),
+      "name": ctype.getName()}
+        file.write(decl)
+
+# ------------------- Set From Map CType -------------------------------
+    def _GenerateCTypeTerraformMapSetFrom(self, ctype, file):
+        decl = """
+func Set%(camel)sFromMap(object *%(name)s, d *schema.ResourceData, m interface{}, val interface{}) {
+\tlog.Printf("[Set%(camel)sFromMAP] map = %%#v", val)
+
+\t// SPEW
+\tlog.Printf("SPEW: %%v", spew.Sdump(val))
+\tspew.Dump(val) // dummy call to satisfy import
+\t// SPEW
+
+%(setters)s}
+""" %{"camel": ctype.getName(), "setters":
+      '\t'.join(self._GenerateCTypeMapSetPropertyMethods(ctype).splitlines(True)),
       "name": ctype.getName()}
         file.write(decl)
 
@@ -400,7 +488,7 @@ func Set%(camel)sFromResource(object *%(name)s, d *schema.ResourceData, m interf
                     "field": field, "ttype": ttype,
                     "name": member.membername}
             if not is_pod:
-                setter = "Write%(type)sToResource(%(ptr)sobject.%(member)s, d, m, key + \"%(name)s\")\n" % {
+                setter = "if object.%(member)s != nil {\tWrite%(type)sToResource(%(ptr)sobject.%(member)s, d, m, key + \"%(name)s\")\n}\n" % {
                     "name": member.membername,
                     "type": origtype, "member": field,
                     "ptr": ptr}
@@ -448,7 +536,7 @@ func %(camel)sCreate(d *schema.ResourceData, m interface{}) error {
 \t%(client)s
 \tobject := new(%(name)s)
 \tif err := client.Create(object); err != nil {
-\t\treturn fmt.Errorf("Creation of resource %(name)s on %%v: (%%v)", client.GetServer(), err)
+\t\treturn fmt.Errorf("[%(camel)sCreate] Creation of resource %(name)s on %%v: (%%v)", client.GetServer(), err)
 \t}
 \td.SetId(object.GetUuid())
 \treturn nil
@@ -488,8 +576,8 @@ func %(camel)sDelete(d *schema.ResourceData, m interface{}) error {
         file.write(decl)
 
 # ------------------- Resource Object -------------------------------
-    def _GenerateTerraformResource(self, ident, file):
-        self._GenerateTerraformResourceSchema(ident, file)
+    def _GenerateTerraformResource(self, ident, need_refs, file):
+        self._GenerateTerraformResourceSchema(ident, need_refs, file)
         decl = """
 func %(camel)s() *schema.Resource {
 \treturn &schema.Resource{
@@ -502,9 +590,22 @@ func %(camel)s() *schema.Resource {
 }
 """ % {"camel": ResName(ident.getCppName())}
         file.write(decl)
+        decl = """
+func %(camel)sRefs() *schema.Resource {
+\treturn &schema.Resource{
+\t\tCreate: %(camel)sRefsCreate,
+\t\tRead: %(camel)sRefsRead,
+\t\tUpdate: %(camel)sRefsUpdate,
+\t\tDelete: %(camel)sRefsDelete,
+\t\tSchema: %(camel)sRefsSchema(),
+\t}
+}
+""" % {"camel": ResName(ident.getCppName())}
+        if need_refs:
+            file.write(decl)
 
 # ------------------- Schema Object -------------------------------
-    def _GenerateTerraformResourceSchema(self, ident, file):
+    def _GenerateTerraformResourceSchema(self, ident, need_refs, file):
         """Generate the terraform element schema.
 
         Use prop.getOperations() to determine possible acions (CRUD)
@@ -531,11 +632,7 @@ func %(schema)s() map[string]*schema.Schema {
 """ % {"schema": SchemaName(ident.getCppName())}
         file.write(decl)
 
-        if self.once:
-            # print udump(ident, max_depth=1)
-            # print "\n#\n#\n#\n"
-            # print udump(ident.getProperties(), max_depth=2)
-            self.once = False
+        file.write("\t// Properties\n")
         for prop in ident.getProperties():
             # Mark CType as referenced
             ctype = prop.getCType()
@@ -558,20 +655,34 @@ func %(schema)s() map[string]*schema.Schema {
                        "type": prop_type, "elem": elem,
                        "req": required}
             file.write(decl)
-
-        self._GenerateRefsMethods(ident, file)
-        decl = """\t}\n}\n"""
-        file.write(decl)
+        file.write("\t}\n}\n")
+
+        # Refs
+        decl = """
+func %(schema)s() map[string]*schema.Schema {
+\treturn map[string]*schema.Schema{
+\t\t"uuid": &schema.Schema{
+\t\t\tType: schema.TypeString,
+\t\t\tRequired: true,
+\t\t},
+""" % {"schema": SchemaName(ident.getCppName() + "Refs")}
+        refs = self._SnippetRefsMethods(ident, file)
+        if need_refs:
+            file.write(decl)
+            file.write(refs)
+            file.write("\t}\n}\n")
 
 # ------------------- Refs Schema Object --------------------------
-    def _GenerateRefsMethods(self, ident, file):
+    def _SnippetRefsMethods(self, ident, file):
+        decl = ""
         for link_info in ident.getLinksInfo():
             if not ident.isLinkRef(link_info):
                 continue
             link_to = ident.getLinkTo(link_info)
-            self._SnippetRefRead(ident, link_to, '_refs', file)
-            self._SnippetRefAccessor(ident, link_to, '_refs', file)
-            self._SnippetRefModifiers(ident, link_info, file)
+            decl += self._SnippetRefRead(ident, link_to, '_refs')
+            decl += self._SnippetRefAccessor(ident, link_to, '_refs')
+            decl += self._SnippetRefModifiers(ident, link_info)
+        return decl
 
     def _getAttrType(self, ident, link_info):
         xlink = ident.getLink(link_info)
@@ -585,8 +696,8 @@ func %(schema)s() map[string]*schema.Schema {
     def _GenerateBackRefsMethods(self, ident, file):
         for back_link in ident.getBackLinksInfo():
             link_from = ident.getBackLinkFrom(back_link)
-            self._SnippetRefRead(ident, link_from, '_back_refs', file)
-            self._SnippetRefAccessor(ident, link_from, '_back_refs', file)
+            self._SnippetRefRead(ident, link_from, '_back_refs')
+            self._SnippetRefAccessor(ident, link_from, '_back_refs')
 
 # ------------------- Snippet method suffix - refs --------------------------
     def _SnippetMethodSuffix(self, suffix):
@@ -594,15 +705,14 @@ func %(schema)s() map[string]*schema.Schema {
         return expr.sub(lambda x: x.group(1).upper(), suffix)
 
 # ------------------- Snippet Refs Read Object --------------------------
-    def _SnippetRefAccessor(self, ident, ref, suffix, file):
-        pass
+    def _SnippetRefAccessor(self, ident, ref, suffix):
+        return ""
 
-    def _SnippetRefRead(self, ident, ref, suffix, file):
-        pass
+    def _SnippetRefRead(self, ident, ref, suffix):
+        return ""
 
 # ------------------- Snippet Refs Accessor Object --------------------------
-    def _SnippetRefModifiers(self, ident, link_info, file):
-
+    def _SnippetRefModifiers(self, ident, link_info):
         datatype = self._getAttrType(ident, link_info)
         link_to = ident.getLinkTo(link_info)
         elem = "Resource%s()" % link_to.getCppName()
@@ -611,8 +721,7 @@ func %(schema)s() map[string]*schema.Schema {
             elem = """&schema.Resource{
 \t\t\t\tSchema: map[string]*schema.Schema{
 \t\t\t\t\t"to": &schema.Schema{
-\t\t\t\t\t\tType: schema.TypeList,
-\t\t\t\t\t\tElem: Resource%(reftype)s(),
+\t\t\t\t\t\tType: schema.TypeString,
 \t\t\t\t\t\tRequired: true,
 \t\t\t\t\t},
 \t\t\t\t\t"attr": &schema.Schema{
@@ -628,7 +737,7 @@ func %(schema)s() map[string]*schema.Schema {
 \t\t\tType: schema.TypeList,
 \t\t\tElem: %(elem)s,
 \t\t},\n""" % {"name": name, "elem": elem}
-        file.write(decl)
+        return decl
 
 # ------------------- Property Setter Snippet Object --------------------------
     def _SnippetSetObjProperty(self, prop):
@@ -638,9 +747,10 @@ func %(schema)s() map[string]*schema.Schema {
         obj = ""
         val = "val"
         if not is_pod:
-            val = "_"
-            obj = "\tmember := new(%(type)s)\n\tSet%(type)sFromResource(member, d, m, key+\"%(name)s\")\n" % {"type": gotype, "name":
-                                    prop.getCIdentifierName().lower()}
+            # val = "_"
+            # obj = "\tmember := new(%(type)s)\n\tSet%(type)sFromResource(member, d, m, key+\"%(name)s\")\n" %\
+            obj = "\tmember := new(%(type)s)\n\tSet%(type)sFromMap(member, d, m, (val.([]interface{}))[0])\n" %\
+                {"type": gotype, "name": prop.getCIdentifierName().lower()}
             value = "member"
         decl = """if %(val)s, ok := d.GetOk("%(name)s"); ok {
 %(member_obj)s\tobject.Set%(field)s(%(value)s)
@@ -648,6 +758,43 @@ func %(schema)s() map[string]*schema.Schema {
       "value": value, "member_obj": obj, "val": val}
         return decl
 
+# ------------------- Ref Setter Snippet Object --------------------------
+    def _SnippetSetObjRef(self, ident, link_info):
+        link_to = ident.getLinkTo(link_info)
+        name = link_to.getCIdentifierName().lower()
+        data_obj = ""
+        data_getter = ""
+        datatype = self._getAttrType(ident, link_info)
+        if datatype:
+            data_obj = ", *dataObj"
+            data_getter = """\n\t\tdataObj := new (%(type)s)
+\t\tSet%(type)sFromResource(dataObj, d, m, key+"%(name)s_refs"+".attr")
+\t\tlog.Printf("Data obj: %%+v", dataObj)""" %\
+                {"type": datatype, "name": name}
+
+        # TODO(KR) Value in 'for' loop is not used. This may not work at all!
+        decl = """if val, ok := d.GetOk("%(name)s_refs"); ok {
+\tlog.Printf("Got ref %(name)s_refs -- will call: object.Add%(refname)s(refObj%(refdata)s)")
+\tfor k, v := range val.([]interface{}) {
+\t\tlog.Printf("Item: %%+v => %%+v", k, v)
+\t\tval, ok := d.GetOk("to")
+\t\tlog.Printf("GetOk -- 'to': %%v -- val: %%#v", ok, val)
+\t\tvaln, okn := d.GetOk(key + "to")
+\t\tlog.Printf("GetOk ##nested## -- '%%v': %%v -- val: %%#v", "network_ipam_refs." + "to", okn, valn)
+\t\trefId := (v.(map[string]interface{}))["to"]
+\t\trefObj, err := client.FindByUuid("%(reftype)s", refId.(string))%(datagetter)s
+\t\tif err != nil {
+\t\t\treturn fmt.Errorf("[SnippetSetObjRef] Retrieving %(reftype)s by Uuid = %%v as ref for %(refname)s on %%v (%%v)", refId, client.GetServer(), err)
+\t\t}
+\t\tobject.Add%(refname)s(refObj.(*%(refname)s)%(refdata)s)
+\t}\n}\n""" % {
+            "name": name,
+            "refname": link_to.getCppName(),
+            "reftype": link_to.getName(),
+            "datagetter": data_getter,
+            "refdata": data_obj}
+        return decl
+
 # ------------------- Properties Setter Object -------------------------------
     def _GenerateSetPropertyMethods(self, ident):
         setters = ""
@@ -655,6 +802,15 @@ func %(schema)s() map[string]*schema.Schema {
             setters += self._SnippetSetObjProperty(prop)
         return setters
 
+# ------------------- Properties Setter Object -------------------------------
+    def _GenerateSetRefsMethods(self, ident):
+        setters = ""
+        for link_info in ident.getLinksInfo():
+            if not ident.isLinkRef(link_info):
+                continue
+            setters += self._SnippetSetObjRef(ident, link_info)
+        return setters
+
 # ------------------- Set From Resource Object -------------------------------
     def _GenerateTerraformResourceSetFrom(self, ident, file):
         decl = """
@@ -663,11 +819,32 @@ func Set%(camel)sFromResource(object *%(name)s, d *schema.ResourceData, m interf
 \tif len(key) != 0 {
 \t\tkey = key + "."
 \t}
+\tlog.Printf("[Set%(camel)sFromResource] key = %%v, prefix = %%v", key, prefix)\t\t
 %(setters)s
 }
-""" %{"camel": ident.getCppName(), "setters":
-      '\t'.join(self._GenerateSetPropertyMethods(ident).splitlines(True)),
-      "name": ident.getCppName()}
+""" \
+        % {"camel": ident.getCppName(),
+           "setters":
+           '\t'.join(self._GenerateSetPropertyMethods(ident).splitlines(True)),
+           "name": ident.getCppName()}
+        file.write(decl)
+        # Refs
+        decl = """
+func SetRefs%(camel)sFromResource(object *%(name)s, d *schema.ResourceData, m interface{}, prefix ...string) error {
+\tkey := strings.Join(prefix, ".")
+\tif len(key) != 0 {
+\t\tkey = key + "."
+\t}
+\t%(client)s
+\tlog.Printf("[SetRefs%(camel)sFromResource] key = %%v, prefix = %%v", key, prefix)
+%(setters)s
+\treturn nil
+}
+""" \
+        % {"camel": ident.getCppName(), "setters":
+           '\t'.join(self._GenerateSetRefsMethods(ident).splitlines(True)),
+           "client": self._SnippetGetClient(),
+           "name": ident.getCppName()}
         file.write(decl)
 
 # ------------------- Property Writer Snippet Object ------------------------
@@ -732,13 +909,13 @@ func Write%(camel)sToResource(object %(name)s, d *schema.ResourceData, m interfa
         file.write(decl)
 
 # ------------------- Create Object -------------------------------
-    def _GenerateTerraformResourceCreate(self, ident, file):
+    def _GenerateTerraformResourceCreate(self, ident, need_refs, file):
         decl = """
 func %(camel)sCreate(d *schema.ResourceData, m interface{}) error {
 \t// SPEW
 \tlog.Printf("%(camel)sCreate")
 \t//log.Print(spew.Sdump(d))
-\tspew.Dump(d)
+\tspew.Dump(d) // dummy call to satisfy import
 \t// SPEW
 \t%(client)s
 \tobject := new(%(type)s)
@@ -747,7 +924,7 @@ func %(camel)sCreate(d *schema.ResourceData, m interface{}) error {
 \t\tpuuid := puuid_obj.(string)
 \t\tparent, err := client.FindByUuid(object.GetDefaultParentType(), puuid)
 \t\tif err != nil {
-\t\t\treturn fmt.Errorf("retrieving Parent with uuid %%s of type %%s for resource %%s (%%s)", puuid, object.GetDefaultParentType(), d.Get("name"), "%(type)s")
+\t\t\treturn fmt.Errorf("[%(camel)sCreate] retrieving Parent with uuid %%s of type %%s for resource %%s (%%s) - on %%v (%%v)", puuid, object.GetDefaultParentType(), d.Get("name"), "%(type)s", client.GetServer(), err)
 \t\t}
 \t\tobject.SetParent(parent)
 \t}
@@ -755,59 +932,118 @@ func %(camel)sCreate(d *schema.ResourceData, m interface{}) error {
 \tSet%(type)sFromResource(object, d, m)
 
 \tif err := client.Create(object); err != nil {
-\t\treturn fmt.Errorf("Creation of resource %(type)s on %%v: (%%v)", client.GetServer(), err)
+\t\treturn fmt.Errorf("[%(camel)sCreate] Creation of resource %(type)s on %%v: (%%v)", client.GetServer(), err)
 \t}
 \td.SetId(object.GetUuid())
 \treturn nil
 }
-""" % {"camel": ResName(ident.getCppName()),
-       "client": self._SnippetGetClient(),
-       "type": ident.getCppName() }
+""" \
+        % {"camel": ResName(ident.getCppName()),
+           "client": self._SnippetGetClient(),
+           "type": ident.getCppName() }
+        file.write(decl)
+
+        decl = """
+func %(camel)sRefsCreate(d *schema.ResourceData, m interface{}) error {
+\t// SPEW
+\tlog.Printf("%(camel)sCreate")
+\t//log.Printf("SPEW: %%v", spew.Sdump(d))
+\t// SPEW
+
+\t%(client)s
+\tuuid_obj, ok := d.GetOk("uuid")
+\tif ok == false {
+\t\treturn fmt.Errorf("[%(camel)sRefsCreate] Missing 'uuid' field for resource %(type)s")
+\t}
+\tuuid := uuid_obj.(string)
+\tobj, err := client.FindByUuid("%(resname)s", uuid)
+\tif err != nil {
+\t\treturn fmt.Errorf("[%(camel)sRefsCreate] Retrieving %(type)s with uuid %%s on %%v (%%v)", uuid, client.GetServer(), err)
+\t}
+\tobj%(type)s := obj.(*%(type)s) // Fully set by Contrail backend
+\tif err := SetRefs%(type)sFromResource(obj%(type)s, d, m); err != nil {
+\t\treturn fmt.Errorf("[%(camel)sRefsCreate] Set refs on object %(type)s (uuid: %%v) on %%v (%%v)", uuid, client.GetServer(), err)
+\t}
+\tlog.Printf("Object href: %%v", obj%(type)s.GetHref())
+\tif err := client.Update(obj%(type)s); err != nil {
+\t\treturn fmt.Errorf("[%(camel)sRefsCreate] Update refs for resource %(type)s (uuid: %%v) on %%v (%%v)", uuid, client.GetServer(), err)
+\t}
+\treturn nil
+}
+""" \
+        % {"camel": ResName(ident.getCppName()),
+           "client": self._SnippetGetClient(),
+           "resname": ident.getName(),
+           "ref": ident.getCIdentifierName().lower() + '_refs',
+           "type": ident.getCppName()}
         file.write(decl)
 
 # ------------------- Read Object -------------------------------
-    def _GenerateTerraformResourceRead(self, ident, file):
+    def _GenerateTerraformResourceRead(self, ident, need_refs, file):
         decl = """
 func %(camel)sRead(d *schema.ResourceData, m interface{}) error {
 \t%(client)s
 \tbase, err := client.FindByUuid("%(typename)s", d.Id())
 \tif err != nil {
-\t\treturn fmt.Errorf("Read resource %(typename)s on %%v: (%%v)", client.GetServer(), err)
+\t\treturn fmt.Errorf("[%(camel)sRead] Read resource %(typename)s on %%v: (%%v)", client.GetServer(), err)
 \t}
 \tobject := base.(*%(type)s)
 \tWrite%(type)sToResource(*object, d, m)
 \treturn nil
 }
-""" % {"camel": ResName(ident.getCppName()),
-       "client": self._SnippetGetClient(),
-       "type": ident.getCppName(), "typename": ident.getName()}
+""" \
+        % {"camel": ResName(ident.getCppName()),
+           "client": self._SnippetGetClient(),
+           "type": ident.getCppName(),
+           "typename": ident.getName()}
+        file.write(decl)
+
+        decl = """
+func %(camel)sRefsRead(d *schema.ResourceData, m interface{}) error {
+\treturn nil
+}
+""" % {"camel": ResName(ident.getCppName())}
         file.write(decl)
 
 # ------------------- Update Object -------------------------------
-    def _GenerateTerraformResourceUpdate(self, ident, file):
+    def _GenerateTerraformResourceUpdate(self, ident, need_refs, file):
         decl = """
 func %(camel)sUpdate(d *schema.ResourceData, m interface{}) error {
 \t%(client)s
-\tuobject := new(%(type)s)
+\tobj, err := client.FindByUuid("%(resname)s", d.Id())
+\tif err != nil {
+\t\treturn fmt.Errorf("[%(camel)sResourceUpdate] Retrieving %(type)s with uuid %%s on %%v (%%v)", d.Id(), client.GetServer(), err)
+\t}
+\tuobject := obj.(*%(type)s)
 \tUpdate%(type)sFromResource(uobject, d, m)
 
+\tlog.Printf("Object href: %%v", uobject.GetHref())
 \tif err := client.Update(uobject); err != nil {
-\t\treturn fmt.Errorf("Update of resource %(type)s on %%v: (%%v)", client.GetServer(), err)
+\t\treturn fmt.Errorf("[%(camel)sUpdate] Update of resource %(type)s on %%v: (%%v)", client.GetServer(), err)
 \t}
 \treturn nil
 }
-""" % { "camel": ResName(ident.getCppName()),
-       "client": self._SnippetGetClient(),
-       "type": ident.getCppName() }
+""" \
+        % {"camel": ResName(ident.getCppName()),
+           "client": self._SnippetGetClient(),
+           "resname": ident.getName(),
+           "type": ident.getCppName()}
+        file.write(decl)
+
+        decl = """
+func %(camel)sRefsUpdate(d *schema.ResourceData, m interface{}) error {
+\treturn nil
+}
+""" % { "camel": ResName(ident.getCppName())}
         file.write(decl)
 
 # ------------------- Delete Object -------------------------------
-    def _GenerateTerraformResourceDelete(self, ident, file):
+    def _GenerateTerraformResourceDelete(self, ident, need_refs, file):
         decl = """
 func %(camel)sDelete(d *schema.ResourceData, m interface{}) error {
 \t%(client)s
 \tif err := client.DeleteByUuid("%(typename)s", d.Id()); err != nil {
-\t\treturn fmt.Errorf("Deletion of resource %(typename)s on %%v: (%%v)", client.GetServer(), err)
+\t\treturn fmt.Errorf("[%(camel)sDelete] Deletion of resource %(typename)s on %%v: (%%v)", client.GetServer(), err)
 \t}
 \td.SetId("")
 \treturn nil
@@ -816,6 +1052,14 @@ func %(camel)sDelete(d *schema.ResourceData, m interface{}) error {
        "client": self._SnippetGetClient(), "typename": ident.getName()}
         file.write(decl)
 
+        decl = """
+func %(camel)sRefsDelete(d *schema.ResourceData, m interface{}) error {
+\treturn nil
+}
+""" % {"camel": ResName(ident.getCppName()),
+       "client": self._SnippetGetClient(), "typename": ident.getName()}
+        file.write(decl)
+
 # ------------------- Generate (public method) -------------------------------
     def Generate(self, dirname):
         if not os.path.exists(dirname):
-- 
2.7.4

