From 246f0c89ffa36bbbecaa025dadf737c16aab6cdd Mon Sep 17 00:00:00 2001
From: Kamil Renczewski <kamil.renczewski@codilime.com>
Date: Tue, 26 Sep 2017 16:54:29 +0200
Subject: [PATCH 02/17] WIP: Generating setters for CType types

---
 terraform_mappings.py | 881 ++++++++++----------------------------------------
 1 file changed, 172 insertions(+), 709 deletions(-)

diff --git a/terraform_mappings.py b/terraform_mappings.py
index 6aef342..ddef7cc 100644
--- a/terraform_mappings.py
+++ b/terraform_mappings.py
@@ -42,6 +42,10 @@ def TerraformTypeName(name, orig_name=False):
         'xsd:time': 'schema.TypeInt',
     }.get(name, default)
 
+def IsPodType(name):
+    return not name == TerraformTypeName(name, orig_name=True)
+
+# ------------------- Terraform mappings Class -------------------------------
 class TerraformMappingsGenerator(object):
     def __init__(self, parser, type_map, identifiers, metadata):
         self._parser = parser
@@ -53,13 +57,13 @@ class TerraformMappingsGenerator(object):
 
     def _SnippetGetClient(self):
         return "client := m.(*contrail.Client)\n"\
-                "client.GetServer()"
+                "client.GetServer() // dummy call"
 
     def _GenerateTypeMap(self, dirname):
         file = self._parser.makeFile(os.path.join(dirname, 'types.go'))
         decl = """
 // Automatically generated. DO NOT EDIT.
-// (by %s)
+// (Type Map)
 //
 
 package resources
@@ -70,7 +74,7 @@ import (
 )
 
 var ContrailResourcesMap = map[string]*schema.Resource{
-""" % (sys._getframe().f_code.co_name)
+"""
         file.write(decl)
         for ident in self._identifier_map.values():
             decl = '\t"%s": %s(),\n' % \
@@ -92,54 +96,44 @@ var ContrailResourcesMap = map[string]*schema.Resource{
 
         header = """//
 // Automatically generated. DO NOT EDIT.
-// (by %s)
+// (Object)
 //
 
 package resources
 
 import (
-        //"encoding/json"
+        "fmt"
+
         "github.com/hashicorp/terraform/helper/schema"
         "github.com/Juniper/contrail-go-api"
 )
 
-""" % (sys._getframe().f_code.co_name)
+"""
         file.write(header)
+        self._GenerateTerraformResourceSetFrom(ident, file)
         self._GenerateTerraformResourceCreate(ident, file)
         self._GenerateTerraformResourceRead(ident, file)
         self._GenerateTerraformResourceUpdate(ident, file)
         self._GenerateTerraformResourceDelete(ident, file)
         self._GenerateTerraformResource(ident, file)
 
-#        self._GenerateConstFlags(ident, file)
-#        self._GenerateObjectStruct(ident, file)
-#        self._GenerateGenericMethods(ident, file)
-#        self._GeneratePropertyMethods(ident, file)
-#        self._GenerateChildrenMethods(ident, file)
-#        self._GenerateRefsMethods(ident, file)
-#        self._GenerateBackRefsMethods(ident, file)
-#        self._GenerateMarshalJSON(ident, file)
-#        self._GenerateUnmarshalJSON(ident, file)
-#        self._GenerateUpdate(ident, file)
-#        self._GenerateUpdateReferences(ident, file)
-#        self._GenerateClientAuxMethods(ident, file)
-
 # ------------------- Struct Type -------------------------------
     def _GenerateStructType(self, ctype, filename):
         file = self._parser.makeFile(filename)
         header = """//
 // Automatically generated. DO NOT EDIT.
-// (by %s)
+// (Struct Type [aka CType])
 //
 
 package resources
 
 import (
-        //"encoding/json"
         "github.com/hashicorp/terraform/helper/schema"
         "github.com/Juniper/contrail-go-api"
+
+        //"fmt"
 )
-""" % (sys._getframe().f_code.co_name)
+"""
         file.write(header)
         self._GenerateCType(ctype, file)
 
@@ -148,13 +142,14 @@ import (
             if deptype.getName() in self._top_level_map:
                 continue
             self._GenerateCType(deptype, file)
-        self._GenerateCTypeTerraformResourceCreate(ctype, file)
+        self._GenerateCTypeTerraformResourceSetFrom(ctype, file)
+        #self._GenerateCTypeTerraformResourceCreate(ctype, file)
         self._GenerateCTypeTerraformResourceRead(ctype, file)
-        self._GenerateCTypeTerraformResourceUpdate(ctype, file)
-        self._GenerateCTypeTerraformResourceDelete(ctype, file)
+        #self._GenerateCTypeTerraformResourceUpdate(ctype, file)
+        #self._GenerateCTypeTerraformResourceDelete(ctype, file)
         self._GenerateCTypeTerraformResource(ctype, file)
 
-# ------------------- Schema -------------------------------
+# ------------------- Schema CType -------------------------------
     def _GenerateCTypeTerraformResourceSchema(self, ctype, file):
         decl = """
 func %(camel)s() map[string]*schema.Schema {
@@ -183,11 +178,64 @@ func %(camel)s() map[string]*schema.Schema {
             file.write(decl)
         file.write('\t}\n}\n')
 
-# ------------------- Resource -------------------------------
+# ------------------- Properties Setter CType -------------------------------
+    def _GenerateCTypePropertyMethods(self, ctype):
+        setters = ""
+        for member in ctype.getDataMembers():
+            gotype = member.xsd_object.getType()
+            is_pod = IsPodType(gotype)
+            setme = "\tobject.%s = val.(%s)" % (CamelCase(member.membername),
+                                          getGoLangType(gotype))
+            obj = ""
+            if not is_pod:
+                obj = "\tmember := new(%s)\n" % gotype
+                setme = "Set%sFromResource(member, d, m)" % gotype
+            if member.isSequence:
+                seq = """\tfor _, v := range val {
+\t\titem := v.(map[string]interface{})
+\t\tif iv, ok := item["
+
+
+
+Sprawdzić czy jak się poda klucz w postaci item.subitem.subsubitem do getOK
+terraformowego, to zwróci zagnieżdżony obiekt ze schemy. Jeśli tak, to należy
+tego użyć zamiast bawić się tak jak w providerze dla openstacka (mapa stringów
+na wartości). Jeśli będzie działąć, to trzeba będzie zmodyfikować metody
+Set<xxx>FromResource żeby łykały zagnieżdzony adreSprawdzić czy jak się poda
+klucz w postaci item.subitem.subsubitem do getOK terraformowego, to zwróci
+zagnieżdżony obiekt ze schemy. Jeśli tak, to należy tego użyć zamiast bawić
+się tak jak w providerze dla openstacka (mapa stringów na wartości). Jeś będzie
+działąć, to trzeba będzie zmodyfikować metody
+Set<xxx>FromResource żeby łykały zagnieżdzony adres. Kod terraformowego
+ResourceData wygląda jakby powinien to łykać.
+
+
+
+\t}
+""" % { "gotype": gotype }
+            decl = """if val, ok := d.GetOk("%(name)s"); ok {
+%(member_obj)s%(setme)s
+}\n""" % {"name": member.membername, "member_obj": obj, "setme": setme}
+            setters += decl
+        return setters
+
+# ------------------- Set From Resource CType -------------------------------
+    def _GenerateCTypeTerraformResourceSetFrom(self, ident, file):
+        decl = """
+func Set%(camel)sFromResource(object *%(name)s, d *schema.ResourceData, m interface{}) {
+%(setters)s
+}
+""" %{"camel": ident.getName(), "setters":
+      '\t'.join(self._GenerateCTypePropertyMethods(ident).splitlines(True)),
+      "name": ident.getName()}
+        file.write(decl)
+
+# ------------------- Resource CType -------------------------------
     def _GenerateCTypeTerraformResource(self, ctype, file):
         self._GenerateCTypeTerraformResourceSchema(ctype, file)
 
         decl = """
+/*
 func %(camel)s() *schema.Resource {
 \treturn &schema.Resource{
 \t\tCreate: %(camel)sCreate,
@@ -196,7 +244,7 @@ func %(camel)s() *schema.Resource {
 \t\tDelete: %(camel)sDelete,
 \t\tSchema: %(camel)sSchema(),
 \t}
-}
+}*/
 """ % {"camel": ResName(ctype.getName())}
         file.write(decl)
 
@@ -204,18 +252,22 @@ func %(camel)s() *schema.Resource {
         ctypename = ctype.getName()
         self._top_level_map[ctypename] = self._type_map[ctypename]
 
-# ------------------- Create -------------------------------
+# ------------------- Create CType -------------------------------
     def _GenerateCTypeTerraformResourceCreate(self, ctype, file):
         decl = """
 func %(camel)sCreate(d *schema.ResourceData, m interface{}) error {
 \t%(client)s
+\tobject := new(%(name)s)
+\tif err := client.Create(object); err != nil {
+\t\treturn fmt.Errorf("Creation of resource %(name)s on %%v", client.GetServer())
+\t}
 \treturn nil
 }
-""" % {"camel": ResName(ctype.getName()), "client": self._SnippetGetClient()}
+""" % {"camel": ResName(ctype.getName()), "client": self._SnippetGetClient(),
+       "name": ctype.getName()}
         file.write(decl)
-        pass
 
-# ------------------- Read -------------------------------
+# ------------------- Read CType -------------------------------
     def _GenerateCTypeTerraformResourceRead(self, ctype, file):
         decl = """
 func %(camel)sRead(d *schema.ResourceData, m interface{}) error {
@@ -224,9 +276,8 @@ func %(camel)sRead(d *schema.ResourceData, m interface{}) error {
 }
 """ % {"camel": ResName(ctype.getName()), "client": self._SnippetGetClient()}
         file.write(decl)
-        pass
 
-# ------------------- Update -------------------------------
+# ------------------- Update CType -------------------------------
     def _GenerateCTypeTerraformResourceUpdate(self, ctype, file):
         decl = """
 func %(camel)sUpdate(d *schema.ResourceData, m interface{}) error {
@@ -235,9 +286,8 @@ func %(camel)sUpdate(d *schema.ResourceData, m interface{}) error {
 }
 """ % {"camel": ResName(ctype.getName()), "client": self._SnippetGetClient()}
         file.write(decl)
-        pass
 
-# ------------------- Delete -------------------------------
+# ------------------- Delete CType -------------------------------
     def _GenerateCTypeTerraformResourceDelete(self, ctype, file):
         decl = """
 func %(camel)sDelete(d *schema.ResourceData, m interface{}) error {
@@ -247,87 +297,6 @@ func %(camel)sDelete(d *schema.ResourceData, m interface{}) error {
 """ % {"camel": ResName(ctype.getName()), "client": self._SnippetGetClient()}
         file.write(decl)
 
-    def _ExamineInnerTypes(self, inner_type_map, top_level, ctype):
-        """ Examine all the dependent types of a given top_level type
-        (recursivly) in order to determine which types are referred to
-        more than once.
-        The ones that are get promoted to top-level.
-        """
-        for deptype in ctype.getDependentTypes():
-            mtype = deptype.getName()
-            if mtype in inner_type_map:
-                xset = inner_type_map[mtype]
-                if top_level not in xset:
-                    xset.append(top_level)
-            else:
-                inner_type_map[mtype] = [top_level]
-
-            self._ExamineInnerTypes(inner_type_map, top_level, deptype)
-
-    def _PromoteInnerTypes(self):
-        inner_type_map = {}
-
-        for ctype in self._top_level_map.values():
-            self._ExamineInnerTypes(inner_type_map, ctype, ctype)
-
-        while True:
-            promoted = []
-            for itype, typeset in inner_type_map.iteritems():
-                if len(typeset) == 1:
-                    continue
-
-                # print "promote %s" % itype
-                # for typ in typeset:
-                #     print "    %s" % typ.getName()
-                self._top_level_map[itype] = self._type_map[itype]
-                promoted.append(itype)
-
-            if len(promoted) == 0:
-                break
-
-            for itype in promoted:
-                del inner_type_map[itype]
-                ctype = self._type_map[itype]
-                self._ExamineInnerTypes(inner_type_map, ctype, ctype)
-
-    def _IdentifierLinks(self, ident):
-        """ Returns the list of all the links (children, refs, back_refs)
-        of a specific identifier.
-        """
-        fields = []
-        for link_info in ident.getLinksInfo():
-            if ident.isLinkRef(link_info):
-                suffix = '_refs'
-            elif ident.isLinkHas(link_info):
-                suffix = 's'
-            else:
-                suffix = '_refs'
-            link_to = ident.getLinkTo(link_info)
-            fields.append(link_to.getCIdentifierName() + suffix)
-        for back_link in ident.getBackLinksInfo():
-            link_from = ident.getBackLinkFrom(back_link)
-            fields.append(link_from.getCIdentifierName() + '_back_refs')
-
-        return fields
-
-    def _GenerateConstFlags(self, ident, file):
-        """ Emit a const declaration with a flag per struct field used to
-            record which fields have been modified.
-        """
-        file.write("\nconst (")
-
-        first = True
-        fields = [prop.getCIdentifierName() for prop in ident.getProperties()]
-        fields.extend(self._IdentifierLinks(ident))
-
-        for field in fields:
-            file.write("\n\t%s_%s" % (ident.getCIdentifierName(), field))
-            if first:
-                file.write(" uint64 = iota")
-                first = False
-        file.write("\n)\n")
-    # end _GenerateConstFlags
-
 # ------------------- Resource -------------------------------
     def _GenerateTerraformResource(self, ident, file):
         self._GenerateTerraformResourceSchema(ident, file)
@@ -374,17 +343,54 @@ func %(schema)s() map[string]*schema.Schema {
         decl = """\t}\n}\n"""
         file.write(decl)
 
-# ------------------- Create -------------------------------
+# ------------------- Properties Setter -------------------------------
+    def _GeneratePropertyMethods(self, ident):
+        setters = ""
+        for prop in ident.getProperties():
+            gotype = prop.getGoLangTypename()
+            is_pod = IsPodType(gotype)
+            value = "val.(%(type)s)" % { "type": gotype }
+            obj = ""
+            if not is_pod:
+                obj = "\tmember := new(%(type)s)\n\tSet%(type)sFromResource(member, d, m)\n" % {"type": gotype}
+                value = "member"
+            decl = """if val, ok := d.GetOk("%(name)s"); ok {
+%(member_obj)s\tobject.Set%(field)s(%(value)s)
+}\n""" % {"name": prop.getCIdentifierName(), "field": prop.getCppName(),
+          "value": value, "member_obj": obj}
+            setters += decl
+        return setters
+
+# ------------------- Set From Resource Object -------------------------------
+    def _GenerateTerraformResourceSetFrom(self, ident, file):
+        decl = """
+func Set%(camel)sFromResource(object *%(name)s, d *schema.ResourceData, m interface{}) {
+%(setters)s
+}
+""" %{"camel": ident.getCppName(), "setters":
+      '\t'.join(self._GeneratePropertyMethods(ident).splitlines(True)),
+      "name": ident.getCppName()}
+        file.write(decl)
+
+# ------------------- Create Object -------------------------------
     def _GenerateTerraformResourceCreate(self, ident, file):
         decl = """
 func %(camel)sCreate(d *schema.ResourceData, m interface{}) error {
 \t%(client)s
+\tobject := new(%(name)s)
+\tSet%(name)sFromResource(object, d, m)
+
+\tif err := client.Create(object); err != nil {
+\t\treturn fmt.Errorf("Creation of resource %(name)s on %%v", client.GetServer())
+\t}
 \treturn nil
 }
-""" % {"camel": ResName(ident.getCppName()), "client": self._SnippetGetClient()}
+""" % {"camel": ResName(ident.getCppName()),
+       "client": self._SnippetGetClient(),
+       "name": ident.getCppName()}
         file.write(decl)
 
-# ------------------- Read -------------------------------
+# ------------------- Read Object -------------------------------
     def _GenerateTerraformResourceRead(self, ident, file):
         decl = """
 func %(camel)sRead(d *schema.ResourceData, m interface{}) error {
@@ -394,7 +400,7 @@ func %(camel)sRead(d *schema.ResourceData, m interface{}) error {
 """ % {"camel": ResName(ident.getCppName()), "client": self._SnippetGetClient()}
         file.write(decl)
 
-# ------------------- Update -------------------------------
+# ------------------- Update Object -------------------------------
     def _GenerateTerraformResourceUpdate(self, ident, file):
         decl = """
 func %(camel)sUpdate(d *schema.ResourceData, m interface{}) error {
@@ -404,7 +410,7 @@ func %(camel)sUpdate(d *schema.ResourceData, m interface{}) error {
 """ % {"camel": ResName(ident.getCppName()), "client": self._SnippetGetClient()}
         file.write(decl)
 
-# ------------------- Delete -------------------------------
+# ------------------- Delete Object -------------------------------
     def _GenerateTerraformResourceDelete(self, ident, file):
         decl = """
 func %(camel)sDelete(d *schema.ResourceData, m interface{}) error {
@@ -414,593 +420,7 @@ func %(camel)sDelete(d *schema.ResourceData, m interface{}) error {
 """ % {"camel": ResName(ident.getCppName()), "client": self._SnippetGetClient()}
         file.write(decl)
 
-# ------------------- Object -------------------------------
-    def _GenerateObjectStruct(self, ident, file):
-        """ Generate the golang struct type definition for an Identifier.
-        """
-        decl = """
-// _GenerateObjectStruct
-type %(camel)sStruct struct {
-\tcontrail.ObjectBase
-
-\t// prop: prop.getCIdentifierName -> prop.getGoLangTypename
-""" % {"camel": ResName(ident.getCppName())}
-        file.write(decl)
-
-        for prop in ident.getProperties():
-            decl = '\t%s %s // prop: %s {{{ %s}}}\n' % \
-                   (prop.getCIdentifierName(), prop.getGoLangTypename(),
-                    dump(prop), dump(prop.getOperations()))
-            file.write(decl)
-            ctype = prop.getCType()
-            if ctype:
-                ctypename = ctype.getName()
-                self._top_level_map[ctypename] = self._type_map[ctypename]
-
-        for link_info in ident.getLinksInfo():
-            if ident.isLinkHas(link_info):
-                child = ident.getLinkTo(link_info)
-                decl = '\t%ss contrail.ReferenceList // ident.isLinkHas\n' % \
-                       child.getCIdentifierName()
-                file.write(decl)
-            else:
-                link_to = ident.getLinkTo(link_info)
-                decl = '\t%s_refs contrail.ReferenceList // No isLinkHas - .*_refs\n' % \
-                       link_to.getCIdentifierName()
-                file.write(decl)
-                datatype = self._getAttrType(ident, link_info)
-                if datatype:
-                    self._top_level_map[datatype] = self._type_map[datatype]
-
-# BackRefs are ommited for now (don't know if needed)
-#        for back_link in ident.getBackLinksInfo():
-#            link_from = ident.getBackLinkFrom(back_link)
-#            decl = '\t%s_back_refs contrail.ReferenceList\n' % \
-#                   link_from.getCIdentifierName()
-#            file.write(decl)
-
-        decl = """\t//Last:
-\tvalid uint64
-\tmodified uint64
-\tbaseMap map[string]contrail.ReferenceList
-}
-"""
-        file.write(decl)
-    # end _GenerateObjectStruct
-
-    def _GenerateGenericMethods(self, ident, file):
-        """ Methods that do not iterate through the Identifier's fields.
-        """
-        parent_fqn = ""
-        parent_type = ""
-        parents = ident.getParents()
-        if parents:
-            (parent, meta, _) = parents[0]
-            quoted_list = map(lambda x: '"%s"' % x, parent.getDefaultFQName())
-            parent_fqn = ', '.join(quoted_list)
-            parent_type = parent.getName()
-
-        decl = """
-func (obj *%(camel)s) GetType() string {
-        return "%(typename)s"
-}
-
-func (obj *%(camel)s) GetDefaultParent() []string {
-        name := []string{%(parent_fqn)s}
-        return name
-}
-
-func (obj *%(camel)s) GetDefaultParentType() string {
-        return "%(parent_type)s"
-}
-
-func (obj *%(camel)s) SetName(name string) {
-        obj.VSetName(obj, name)
-}
-
-func (obj *%(camel)s) SetParent(parent contrail.IObject) {
-        obj.VSetParent(obj, parent)
-}
-
-func (obj *%(camel)s) storeReferenceBase(
-        name string, refList contrail.ReferenceList) {
-        if obj.baseMap == nil {
-                obj.baseMap = make(map[string]contrail.ReferenceList)
-        }
-        refCopy := make(contrail.ReferenceList, len(refList))
-        copy(refCopy, refList)
-        obj.baseMap[name] = refCopy
-}
-
-func (obj *%(camel)s) hasReferenceBase(name string) bool {
-        if obj.baseMap == nil {
-                return false
-        }
-        _, exists := obj.baseMap[name]
-        return exists
-}
-
-func (obj *%(camel)s) UpdateDone() {
-        obj.modified = 0
-        obj.baseMap = nil
-}
-
-""" \
-        % {"camel": ResName(ident.getCppName()),
-           "typename": ident.getName(),
-           "parent_fqn": parent_fqn,
-           "parent_type": parent_type
-           }
-        file.write(decl)
-    # _GenerateGenericMethods
-
-    def _GeneratePropertyMethods(self, ident, file):
-        for prop in ident.getProperties():
-            decl = """
-func (obj *%(typecamel)s) Get%(fieldcamel)s() %(fieldtype)s {
-        return obj.%(fieldid)s
-}
-
-func (obj *%(typecamel)s) Set%(fieldcamel)s(value %(ptr)s%(fieldtype)s) {
-        obj.%(fieldid)s = %(ptr)svalue
-        obj.modified |= %(typeid)s_%(fieldid)s
-}
-""" \
-            % {'typecamel': ResName(ident.getCppName()),
-               'typeid': ident.getCIdentifierName(),
-               'fieldcamel': ResName(prop.getCppName()),
-               'fieldid': prop.getCIdentifierName(),
-               'fieldtype': prop.getGoLangTypename(),
-               'ptr': '*' if prop.getCType() else ''
-               }
-            file.write(decl)
-    # end _GeneratePropertyMethods
-
-    def _GenerateChildrenMethods(self, ident, file):
-        for link_info in ident.getLinksInfo():
-            if not ident.isLinkHas(link_info):
-                continue
-            child = ident.getLinkTo(link_info)
-            self._GenerateReferenceRead(ident, child, 's', file)
-            self._GenerateReferenceAccessor(ident, child, "s", file)
-
-    # end _GenerateChildrenMethods
-
-    def _GenerateRefsMethods(self, ident, file):
-        for link_info in ident.getLinksInfo():
-            if not ident.isLinkRef(link_info):
-                continue
-            link_to = ident.getLinkTo(link_info)
-            self._GenerateReferenceRead(ident, link_to, '_refs', file)
-            self._GenerateReferenceAccessor(ident, link_to, '_refs', file)
-            self._GenerateReferenceModifiers(ident, link_info, file)
-
-    # end _GenerateRefsMethods
-
-    def _GenerateBackRefsMethods(self, ident, file):
-        for back_link in ident.getBackLinksInfo():
-            link_from = ident.getBackLinkFrom(back_link)
-            self._GenerateReferenceRead(ident, link_from, '_back_refs', file)
-            self._GenerateReferenceAccessor(ident, link_from, '_back_refs',
-                                            file)
-    # end _GenerateBackRefsMethods
-
-    def _MethodSuffix(self, suffix):
-        expr = re.compile(r'_([a-z])')
-        return expr.sub(lambda x: x.group(1).upper(), suffix)
-
-    def _GenerateReferenceRead(self, ident, ref, suffix, file):
-        decl = """
-func (obj *%(typecamel)s) read%(fieldcamel)s%(methodsuffix)s() error {
-        if !obj.IsTransient() &&
-                (obj.valid & %(typeid)s_%(fieldid)s%(suffix)s == 0) {
-                err := obj.GetField(obj, "%(fieldid)s%(suffix)s")
-                if err != nil {
-                        return err
-                }
-        }
-        return nil
-}
-""" \
-        % {'typecamel': ResName(ident.getCppName()),
-           'fieldcamel': ResName(ref.getCppName()),
-           'typeid': ident.getCIdentifierName(),
-           'fieldid': ref.getCIdentifierName(),
-           'methodsuffix': self._MethodSuffix(suffix),
-           'suffix': suffix
-           }
-        file.write(decl)
-
-    # end _GenerateReferenceRead
-
-    def _GenerateReferenceAccessor(self, ident, ref, suffix, file):
-        decl = """
-func (obj *%(typecamel)s) Get%(fieldcamel)s%(methodsuffix)s() (
-        contrail.ReferenceList, error) {
-        err := obj.read%(fieldcamel)s%(methodsuffix)s()
-        if err != nil {
-                return nil, err
-        }
-        return obj.%(fieldid)s%(suffix)s, nil
-}
-""" \
-        % {'typecamel': ResName(ident.getCppName()),
-           'fieldcamel': ResName(ref.getCppName()),
-           'fieldid': ref.getCIdentifierName(),
-           'methodsuffix': self._MethodSuffix(suffix),
-           'suffix': suffix,
-           }
-        file.write(decl)
-    # end _GenerateReferenceAccessor
-
-    def _getAttrType(self, ident, link_info):
-        xlink = ident.getLink(link_info)
-        if xlink.getXsdType():
-            ctype = xlink.getCType()
-            if ctype is not None:
-                return ctype.getName()
-        return None
-
-    def _GenerateReferenceModifiers(self, ident, link_info, file):
-        """ Generate add/delete/clear and set methods.
-        """
-        datatype = self._getAttrType(ident, link_info)
-        link_to = ident.getLinkTo(link_info)
-
-        decl = """
-func (obj *%(typecamel)s) Add%(fieldcamel)s(
-        rhs *%(fieldcamel)s%(datatype)s) error {
-        err := obj.read%(fieldcamel)sRefs()
-        if err != nil {
-                return err
-        }
-
-        if obj.modified & %(typeid)s_%(fieldid)s_refs == 0 {
-                obj.storeReferenceBase("%(fieldname)s", obj.%(fieldid)s_refs)
-        }
-
-        ref := contrail.Reference {
-                rhs.GetFQName(), rhs.GetUuid(), rhs.GetHref(), %(data)s}
-        obj.%(fieldid)s_refs = append(obj.%(fieldid)s_refs, ref)
-        obj.modified |= %(typeid)s_%(fieldid)s_refs
-        return nil
-}
-
-func (obj *%(typecamel)s) Delete%(fieldcamel)s(uuid string) error {
-        err := obj.read%(fieldcamel)sRefs()
-        if err != nil {
-                return err
-        }
-
-        if obj.modified & %(typeid)s_%(fieldid)s_refs == 0 {
-                obj.storeReferenceBase("%(fieldname)s", obj.%(fieldid)s_refs)
-        }
-
-        for i, ref := range obj.%(fieldid)s_refs {
-                if ref.Uuid == uuid {
-                        obj.%(fieldid)s_refs = append(
-                                obj.%(fieldid)s_refs[:i],
-                                obj.%(fieldid)s_refs[i+1:]...)
-                        break
-                }
-        }
-        obj.modified |= %(typeid)s_%(fieldid)s_refs
-        return nil
-}
-
-func (obj *%(typecamel)s) Clear%(fieldcamel)s() {
-        if (obj.valid & %(typeid)s_%(fieldid)s_refs != 0) &&
-           (obj.modified & %(typeid)s_%(fieldid)s_refs == 0) {
-                obj.storeReferenceBase("%(fieldname)s", obj.%(fieldid)s_refs)
-        }
-        obj.%(fieldid)s_refs = make([]contrail.Reference, 0)
-        obj.valid |= %(typeid)s_%(fieldid)s_refs
-        obj.modified |= %(typeid)s_%(fieldid)s_refs
-}
-
-func (obj *%(typecamel)s) Set%(fieldcamel)sList(
-        refList []contrail.ReferencePair) {
-        obj.Clear%(fieldcamel)s()
-        obj.%(fieldid)s_refs = make([]contrail.Reference, len(refList))
-        for i, pair := range refList {
-                obj.%(fieldid)s_refs[i] = contrail.Reference {
-                        pair.Object.GetFQName(),
-                        pair.Object.GetUuid(),
-                        pair.Object.GetHref(),
-                        pair.Attribute,
-                }
-        }
-}
-
-""" \
-        % {'typecamel': ResName(ident.getCppName()),
-           'typeid': ident.getCIdentifierName(),
-           'fieldcamel': ResName(link_to.getCppName()),
-           'fieldid': link_to.getCIdentifierName(),
-           'fieldname': link_to.getName(),
-           'datatype': ', data %s' % datatype if datatype else '',
-           'data': 'data' if datatype else 'nil',
-           }
-        file.write(decl)
-    # end _GenerateReferenceModifiers
-
-    def _GenerateMarshalJSON(self, ident, file):
-        decl = """
-func (obj *%(camel)s) MarshalJSON() ([]byte, error) {
-        msg := map[string]*json.RawMessage {
-        }
-        err := obj.MarshalCommon(msg)
-        if err != nil {
-                return nil, err
-        }
-""" % {'camel': ResName(ident.getCppName())}
-        file.write(decl)
-
-        for prop in ident.getProperties():
-            decl = """
-        if obj.modified & %(typeid)s_%(fieldid)s != 0 {
-                var value json.RawMessage
-                value, err := json.Marshal(&obj.%(fieldid)s)
-                if err != nil {
-                        return nil, err
-                }
-                msg["%(fieldid)s"] = &value
-        }
-""" \
-            % {'typeid': ident.getCIdentifierName(),
-               'fieldid': prop.getCIdentifierName()}
-            file.write(decl)
-
-        for link_info in ident.getLinksInfo():
-            if not ident.isLinkRef(link_info):
-                continue
-            link_to = ident.getLinkTo(link_info)
-            decl = """
-        if len(obj.%(fieldid)s_refs) > 0 {
-                var value json.RawMessage
-                value, err := json.Marshal(&obj.%(fieldid)s_refs)
-                if err != nil {
-                        return nil, err
-                }
-                msg["%(fieldid)s_refs"] = &value
-        }
-""" % {'fieldid': link_to.getCIdentifierName()}
-            file.write(decl)
-
-        decl = """
-        return json.Marshal(msg)
-}
-"""
-        file.write(decl)
-
-    # end _GenerateMarshalJSON
-
-    def _GenerateUnmarshalJSON(self, ident, file):
-        decl = """
-func (obj *%(camel)s) UnmarshalJSON(body []byte) error {
-        var m map[string]json.RawMessage
-        err := json.Unmarshal(body, &m)
-        if err != nil {
-                return err
-        }
-        err = obj.UnmarshalCommon(m)
-        if err != nil {
-                return err
-        }
-        for key, value := range m {
-                switch key {""" % {'camel': ResName(ident.getCppName())}
-        file.write(decl)
-
-        fields = [prop.getCIdentifierName() for prop in ident.getProperties()]
-        typedrefs = []
-        for link_info in ident.getLinksInfo():
-            if ident.isLinkRef(link_info):
-                suffix = '_refs'
-            elif ident.isLinkHas(link_info):
-                suffix = 's'
-            else:
-                suffix = '_refs'
-            link_to = ident.getLinkTo(link_info)
-            name = link_to.getCIdentifierName() + suffix
-            attrtype = self._getAttrType(ident, link_info)
-            if attrtype:
-                typedrefs.append((name, attrtype))
-            else:
-                fields.append(name)
-
-        for back_link in ident.getBackLinksInfo():
-            link_from = ident.getBackLinkFrom(back_link)
-            name = link_from.getCIdentifierName() + '_back_refs'
-            attrtype = self._getAttrType(ident, back_link)
-            if attrtype:
-                typedrefs.append((name, attrtype))
-            else:
-                fields.append(name)
-
-        for field in fields:
-            decl = """
-                case "%(field)s":
-                        err = json.Unmarshal(value, &obj.%(field)s)
-                        if err == nil {
-                                obj.valid |= %(typeid)s_%(field)s
-                        }
-                        break""" % {'typeid': ident.getCIdentifierName(),
-                                    'field': field}
-            file.write(decl)
-
-        for field, attrtype in typedrefs:
-            decl = """
-                case "%(field)s": {
-                        type ReferenceElement struct {
-                                To []string
-                                Uuid string
-                                Href string
-                                Attr %(typename)s
-                        }
-                        var array []ReferenceElement
-                        err = json.Unmarshal(value, &array)
-                        if err != nil {
-                            break
-                        }
-                        obj.valid |= %(typeid)s_%(field)s
-                        obj.%(field)s = make(contrail.ReferenceList, 0)
-                        for _, element := range array {
-                                ref := contrail.Reference {
-                                        element.To,
-                                        element.Uuid,
-                                        element.Href,
-                                        element.Attr,
-                                }
-                                obj.%(field)s = append(obj.%(field)s, ref)
-                        }
-                        break
-                }""" % {'typeid': ident.getCIdentifierName(),
-                        'field': field, 'typename': attrtype}
-            file.write(decl)
-
-        decl = """
-                }
-                if err != nil {
-                        return err
-                }
-        }
-        return nil
-}
-"""
-        file.write(decl)
-    # end _GenerateUnmarshalJSON
-
-    def _GenerateUpdate(self, ident, file):
-        """
-        """
-        decl = """
-func (obj *%(camel)s) UpdateObject() ([]byte, error) {
-        msg := map[string]*json.RawMessage {
-        }
-        err := obj.MarshalId(msg)
-        if err != nil {
-                return nil, err
-        }
-""" % {'camel': ResName(ident.getCppName())}
-        file.write(decl)
-
-        for prop in ident.getProperties():
-            decl = """
-        if obj.modified & %(typeid)s_%(fieldid)s != 0 {
-                var value json.RawMessage
-                value, err := json.Marshal(&obj.%(fieldid)s)
-                if err != nil {
-                        return nil, err
-                }
-                msg["%(fieldid)s"] = &value
-        }
-""" \
-            % {'typeid': ident.getCIdentifierName(),
-               'fieldid': prop.getCIdentifierName()}
-            file.write(decl)
-
-        for link_info in ident.getLinksInfo():
-            if not ident.isLinkRef(link_info):
-                continue
-            link_to = ident.getLinkTo(link_info)
-            decl = """
-        if obj.modified & %(typeid)s_%(fieldid)s_refs != 0 {
-                if len(obj.%(fieldid)s_refs) == 0 {
-                        var value json.RawMessage
-                        value, err := json.Marshal(
-                                          make([]contrail.Reference, 0))
-                        if err != nil {
-                                return nil, err
-                        }
-                        msg["%(fieldid)s_refs"] = &value
-                } else if !obj.hasReferenceBase("%(fieldname)s") {
-                        var value json.RawMessage
-                        value, err := json.Marshal(&obj.%(fieldid)s_refs)
-                        if err != nil {
-                                return nil, err
-                        }
-                        msg["%(fieldid)s_refs"] = &value
-                }
-        }
-
-""" \
-            % {'typeid': ident.getCIdentifierName(),
-               'fieldid': link_to.getCIdentifierName(),
-               'fieldname': link_to.getName()}
-            file.write(decl)
-
-        decl = """
-        return json.Marshal(msg)
-}
-"""
-        file.write(decl)
-
-    # end _GenerateUpdate
-
-    def _GenerateUpdateReferences(self, ident, file):
-        """ Method that triggers the generation of ref-update requests.
-
-        For any reference list marked as modified, generate the delta
-        between current and original data via ObjectBase.UpdateReference.
-        """
-        decl = """
-func (obj *%(camel)s) UpdateReferences() error {
-""" % {'camel': ResName(ident.getCppName())}
-        file.write(decl)
-        for link_info in ident.getLinksInfo():
-            if not ident.isLinkRef(link_info):
-                continue
-            link_to = ident.getLinkTo(link_info)
-            decl = """
-        if (obj.modified & %(typeid)s_%(fieldid)s_refs != 0) &&
-           len(obj.%(fieldid)s_refs) > 0 &&
-           obj.hasReferenceBase("%(fieldname)s") {
-                err := obj.UpdateReference(
-                        obj, "%(fieldname)s",
-                        obj.%(fieldid)s_refs,
-                        obj.baseMap["%(fieldname)s"])
-                if err != nil {
-                        return err
-                }
-        }
-""" \
-            % {'typeid': ident.getCIdentifierName(),
-               'fieldid': link_to.getCIdentifierName(),
-               'fieldname': link_to.getName()}
-            file.write(decl)
-
-        decl = """
-        return nil
-}
-"""
-        file.write(decl)
-
-    # end _GenerateUpdateReferences
-
-    def _GenerateClientAuxMethods(self, ident, file):
-        """
-        ApiClient methods that return a struct type rather than an interface.
-        """
-        decl = """
-func %(camel)sByName(c contrail.ApiClient, fqn string) (*%(camel)s, error) {
-    obj, err := c.FindByName("%(typeid)s", fqn)
-    if err != nil {
-        return nil, err
-    }
-    return obj.(*%(camel)s), nil
-}
-
-func %(camel)sByUuid(c contrail.ApiClient, uuid string) (*%(camel)s, error) {
-    obj, err := c.FindByUuid("%(typeid)s", uuid)
-    if err != nil {
-        return nil, err
-    }
-    return obj.(*%(camel)s), nil
-}
-""" % {'camel': ResName(ident.getCppName()), 'typeid': ident.getName()}
-        file.write(decl)
-    # end _GenerateClientAuxMethods
-
+# ------------------- Generate (public method) -------------------------------
     def Generate(self, dirname):
         if not os.path.exists(dirname):
             os.makedirs(dirname)
@@ -1021,3 +441,46 @@ func %(camel)sByUuid(c contrail.ApiClient, uuid string) (*%(camel)s, error) {
             filename = os.path.join(
                 dirname, ctype.getCIdentifierName() + ".go")
             self._GenerateStructType(ctype, filename)
+
+    def _PromoteInnerTypes(self):
+        inner_type_map = {}
+
+        for ctype in self._top_level_map.values():
+            self._ExamineInnerTypes(inner_type_map, ctype, ctype)
+
+        while True:
+            promoted = []
+            for itype, typeset in inner_type_map.iteritems():
+                if len(typeset) == 1:
+                    continue
+
+                # print "promote %s" % itype
+                # for typ in typeset:
+                #     print "    %s" % typ.getName()
+                self._top_level_map[itype] = self._type_map[itype]
+                promoted.append(itype)
+
+            if len(promoted) == 0:
+                break
+
+            for itype in promoted:
+                del inner_type_map[itype]
+                ctype = self._type_map[itype]
+                self._ExamineInnerTypes(inner_type_map, ctype, ctype)
+
+    def _ExamineInnerTypes(self, inner_type_map, top_level, ctype):
+        """ Examine all the dependent types of a given top_level type
+        (recursivly) in order to determine which types are referred to
+        more than once.
+        The ones that are get promoted to top-level.
+        """
+        for deptype in ctype.getDependentTypes():
+            mtype = deptype.getName()
+            if mtype in inner_type_map:
+                xset = inner_type_map[mtype]
+                if top_level not in xset:
+                    xset.append(top_level)
+            else:
+                inner_type_map[mtype] = [top_level]
+
+            self._ExamineInnerTypes(inner_type_map, top_level, deptype)
-- 
2.7.4

