Index: terraform_mappings.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- terraform_mappings.py	(date 1565964053000)
+++ terraform_mappings.py	(date 1566233442000)
@@ -6,6 +6,8 @@
 import sys
 
 from ifmap_global import CamelCase, getGoLangType
+from ifmap_model import IFMapLink
+
 
 def udump(obj, depth=0, max_depth=10):
     #print "called udump: " + str(type(obj)) + "->" + str(obj) + "[" + str(depth) +"/" + str(max_depth) +"]"
@@ -709,7 +711,13 @@
 %(elem)s\t\t},\n""" % {"name": prop.getCIdentifierName().lower(),
                        "type": prop_type, "elem": elem,
                        "req": required}
+
             file.write(decl)
+
+        if need_refs:
+            refs = self._SnippetRefsMethods(ident, file, True)
+            file.write(refs)
+
         file.write("\t}\n}\n")
 
         # Refs
@@ -721,22 +729,25 @@
 \t\t\tRequired: true,
 \t\t},
 """ % {"schema": SchemaName(ident.getCppName() + "Refs")}
-        refs = self._SnippetRefsMethods(ident, file)
+        refs = self._SnippetRefsMethods(ident, file, False)
         if need_refs:
             file.write(decl)
             file.write(refs)
             file.write("\t}\n}\n")
 
 # ------------------- Refs Schema Object --------------------------
-    def _SnippetRefsMethods(self, ident, file):
+    def _SnippetRefsMethods(self, ident, file, req):
         decl = ""
         for link_info in ident.getLinksInfo():
             if not ident.isLinkRef(link_info):
                 continue
-            link_to = ident.getLinkTo(link_info)
-            decl += self._SnippetRefRead(ident, link_to, '_refs')
-            decl += self._SnippetRefAccessor(ident, link_to, '_refs')
-            decl += self._SnippetRefModifiers(ident, link_info)
+            required = False
+            for info in link_info:
+                if isinstance(info, IFMapLink):
+                    required = ResolveOptional(info.getPresence())
+
+            if req == required:
+                decl += self._SnippetRefModifiers(ident, link_info)
         return decl
 
     def _getAttrType(self, ident, link_info):
@@ -751,28 +762,20 @@
     def _GenerateBackRefsMethods(self, ident, file):
         for back_link in ident.getBackLinksInfo():
             link_from = ident.getBackLinkFrom(back_link)
-            self._SnippetRefRead(ident, link_from, '_back_refs')
-            self._SnippetRefAccessor(ident, link_from, '_back_refs')
 
 # ------------------- Snippet method suffix - refs --------------------------
     def _SnippetMethodSuffix(self, suffix):
         expr = re.compile(r'_([a-z])')
         return expr.sub(lambda x: x.group(1).upper(), suffix)
 
-# ------------------- Snippet Refs Read Object --------------------------
-    def _SnippetRefAccessor(self, ident, ref, suffix):
-        return ""
-
-    def _SnippetRefRead(self, ident, ref, suffix):
-        return ""
-
 # ------------------- Snippet Refs Accessor Object --------------------------
     def _SnippetRefModifiers(self, ident, link_info):
         datatype = self._getAttrType(ident, link_info)
         link_to = ident.getLinkTo(link_info)
-        elem = "Resource%s()" % link_to.getCppName()
+
 
         name = link_to.getCIdentifierName().lower()
+
         if datatype:
             elem = """&schema.Resource{
 \t\t\t\tSchema: map[string]*schema.Schema{
@@ -796,14 +799,12 @@
     \t\t\t\t\t},
     \t\t\t\t},
     \t\t\t}"""
-
-        decl = """\t\t"%(name)s_refs": &schema.Schema{
-    \t\t\tOptional: true,
-    \t\t\tType: schema.TypeList,
-    \t\t\tElem: %(elem)s,
-    \t\t},\n""" % {"name": name, "elem": elem}
+        return """\t\t"%(name)s_refs": &schema.Schema{
+\t\t\tOptional: true,
+\t\t\tType: schema.TypeList,
+\t\t\tElem: %(elem)s,
+\t\t},\n""" % {"name": name, "elem": elem}
 
-        return decl
 
 # ------------------- Property Setter Snippet Object --------------------------
     def _SnippetSetObjProperty(self, ident_name, prop):
@@ -882,21 +883,37 @@
         return setters
 
 # ------------------- Properties Setter Object -------------------------------
-    def _GenerateSetRefsMethods(self, ident):
+    def _GenerateSetRefsMethods(self, ident, req):
         setters = ""
         for link_info in ident.getLinksInfo():
             if not ident.isLinkRef(link_info):
                 continue
-            setters += self._SnippetSetObjRef(ident, link_info)
+
+            required = False
+            for info in link_info:
+                if isinstance(info, IFMapLink):
+                    required = ResolveOptional(info.getPresence())
+
+            if req == required:
+                setters += self._SnippetSetObjRef(ident, link_info)
         return setters
 
 # ------------------- Properties Delete Object -------------------------------
-    def _GenerateDeleteRefsMethods(self, ident):
+    def _GenerateDeleteRefsMethods(self, ident, req):
         setters = ""
         for link_info in ident.getLinksInfo():
             if not ident.isLinkRef(link_info):
                 continue
-            setters += self._SnippetDeleteObjRef(ident, link_info)
+
+            required = False
+
+            for info in link_info:
+
+                if isinstance(info, IFMapLink):
+                    required = ResolveOptional(info.getPresence())
+
+            if req == required:
+                setters += self._SnippetDeleteObjRef(ident, link_info)
         return setters
 
 # ------------------- Set From Resource Object -------------------------------
@@ -930,11 +947,32 @@
 }
 """ \
         % {"camel": ident.getCppName(), "setters":
-           '\t'.join(self._GenerateSetRefsMethods(ident).splitlines(True)),
+           '\t'.join(self._GenerateSetRefsMethods(ident, False).splitlines(True)),
            "client": self._SnippetGetClient(),
            "name": ident.getCppName()}
         file.write(decl)
 
+
+        decl = """
+
+func SetReqRefs%(camel)sFromResource(object *%(name)s, d *schema.ResourceData, m interface{}, prefix ...string) error {
+\tkey := strings.Join(prefix, ".")
+\tif len(key) != 0 {
+\t\tkey = key + "."
+\t}
+\t%(client)s
+\tlog.Printf("[SetRefs%(camel)sFromResource] key = %%v, prefix = %%v", key, prefix)
+%(setters)s
+\treturn nil
+}
+    """ \
+               % {"camel": ident.getCppName(), "setters":
+            '\t'.join(self._GenerateSetRefsMethods(ident, True).splitlines(True)),
+                  "client": self._SnippetGetClient(),
+                  "name": ident.getCppName()}
+        if '\t'.join(self._GenerateSetRefsMethods(ident, True).splitlines(True)):
+            file.write(decl)
+
 # ------------------- Delete From Resource Object ---------------------------
     def _GenerateTerraformResourceDeleteFrom(self, ident, file):
         # Refs
@@ -951,7 +989,7 @@
     }
     """ \
                % {"camel": ident.getCppName(), "setters":
-            '\t'.join(self._GenerateDeleteRefsMethods(ident).splitlines(True)),
+            '\t'.join(self._GenerateDeleteRefsMethods(ident, False).splitlines(True)),
                   "client": self._SnippetGetClient(),
                   "name": ident.getCppName()}
         file.write(decl)
@@ -1046,7 +1084,7 @@
 \t}
 \t//object.SetFQName(object.GetDefaultParentType(), strings.Split(d.Get("parent_fq_name").(string) + ":" + d.Get("name").(string), ":"))
 \tSet%(type)sFromResource(object, d, m)
-
+%(reqRefs)s
 \tif err := client.Create(object); err != nil {
 \t\treturn fmt.Errorf("[%(camel)sCreate] Creation of resource %(type)s on %%v: (%%v)", client.GetServer(), err)
 \t}
@@ -1056,7 +1094,8 @@
 """ \
         % {"camel": ResName(ident.getCppName()),
            "client": self._SnippetGetClient(),
-           "type": ident.getCppName() }
+           "reqRefs": self._GetRequirementSetter(ident),
+           "type": ident.getCppName()}
         file.write(decl)
 
         decl = """
@@ -1095,6 +1134,26 @@
            "type": ident.getCppName()}
         file.write(decl)
 
+    def _GetRequirementSetter(self, ident):
+        answer = ""
+
+        for links in ident.getLinksInfo():
+            if not ident.isLinkRef(links):
+                continue
+            for link in links:
+
+                if isinstance(link, IFMapLink) and ResolveOptional(link.getPresence()):
+                    answer = """
+    \tif err := SetReqRefs%(type)sFromResource(object, d, m); err != nil {
+    \t\treturn fmt.Errorf("[%(camel)sReqRefsCreate] Set required refs on object %(type)s on %%v (%%v)", client.GetServer(), err)
+    \t}
+    """ \
+          % {"camel": ResName(ident.getCppName()),
+             "type":  ident.getCppName()}
+
+        return answer
+
+
 # ------------------- Read Object -------------------------------
     def _GenerateTerraformResourceRead(self, ident, need_refs, file):
         decl = """
